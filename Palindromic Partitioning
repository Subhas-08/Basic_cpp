Return the minimum cuts needed for a palindrome partitioning of A.

Example:
Input : A = "aab"
Output : 1



int Solution::minCut(string A) {
    int n = A.length(), i, k, j;
    int dp[n][n];
    int C[n];
    for(i=0; i<n ; i++){
        dp[i][i] = 0;
    }
    for(i=0;i<n;i++){
        for(j=0;j<n ; j++){
            dp[i][j] = 0;
        }
    }
    for(k=2; k<=n ; k++){
        for(i=0; i<n-k+1; i++){
            j=i+k-1;
            if(k == 2){
                dp[i][j] = (A[i] == A[j])? 0:1;
            }
            else {
                if(A[i] == A[j]){
                    dp[i][j] = dp[i+1][j-1];
                }
                else{
                    dp[i][j] = 1+min(dp[i-1][j] , dp[i][j+1]);
                }
            }
        }
    }
    return dp[0][n-1];
}
